plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.1'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
    id 'org.owasp.dependencycheck' version '8.4.0'  // OWASP Dependency Check
    id "org.sonarqube" version "4.3.1"              // SonarQube plugin
}

group = 'com.rbittencourt'
version = '1.0.0'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

sourceSets {
    integrationTest {
        java.srcDirs = ['src/it/java']
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
    uiTest {
        java.srcDirs = ['src/ui-test']
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

repositories {
    mavenCentral()
    gradlePluginPortal() // Ensure plugin resolution
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    runtimeOnly 'com.h2database:h2'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.seleniumhq.selenium:selenium-java:4.27.0'
    testImplementation 'io.github.bonigarcia:webdrivermanager:5.9.2'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
    uiTestImplementation.extendsFrom testImplementation
    uiTestRuntimeOnly.extendsFrom testRuntimeOnly
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy tasks.named('integrationTest'), tasks.named('jacocoTestReport')
}

tasks.register('integrationTest', Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    useJUnitPlatform()
}

tasks.register('uiTest', Test) {
    testClassesDirs = sourceSets.uiTest.output.classesDirs
    classpath = sourceSets.uiTest.runtimeClasspath
    useJUnitPlatform()
}

test {
    finalizedBy 'jacocoTestReport'
}

jacocoTestReport {
    executionData(tasks.integrationTest)
    dependsOn tasks.test, tasks.integrationTest
    reports {
        xml.required = true
        html.required = true
    }
}

// Configure OWASP Dependency Check plugin
dependencyCheck {
    failBuildOnCVSS = 7.0   // Fail build on CVSS >= 7
    analyzers.assemblyEnabled = false
    formats = ['HTML', 'XML']
    outputDirectory = "$buildDir/reports/dependency-check"
}

// Configure SonarQube plugin (optional, adjust your host and token)
sonarqube {
    properties {
        property "sonar.projectKey", "my-java-project-teja"
        property "sonar.host.url", "http://localhost:9000"
        property "sonar.login", System.getenv("SONARQUBE_TOKEN") ?: ""
    }
}
