plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.1'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
    id 'pmd'
    id 'checkstyle'
}

configurations.all {
    resolutionStrategy {
        force 'com.google.guava:guava:32.0.1-jre'
    }
}

sourceSets {
    integrationTest {
        java.srcDirs = ['src/it/java']
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
    uiTest {
        java.srcDirs = ['src/ui-test']
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    runtimeOnly 'com.h2database:h2'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.seleniumhq.selenium:selenium-java:4.27.0'
    testImplementation 'io.github.bonigarcia:webdrivermanager:5.9.2'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
    uiTestImplementation.extendsFrom testImplementation
    uiTestRuntimeOnly.extendsFrom testRuntimeOnly
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy tasks.named('integrationTest'), tasks.named('jacocoTestReport')
}

tasks.register('integrationTest', Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    useJUnitPlatform()
}

tasks.register('uiTest', Test) {
    testClassesDirs = sourceSets.uiTest.output.classesDirs
    classpath = sourceSets.uiTest.runtimeClasspath
    useJUnitPlatform()
}

test {
    finalizedBy 'jacocoTestReport'
}

jacocoTestReport {
    executionData(tasks.integrationTest)
    dependsOn tasks.test, tasks.integrationTest
    reports {
        xml.required = true
        html.required = true
    }
}

// Optional: Configure Checkstyle to find the config file location
checkstyle {
    toolVersion = '10.12.2' // or your preferred version
    configFile = file('config/checkstyle/checkstyle.xml')
    ignoreFailures = false
}

// Optional: PMD config (you can add custom rules if you want)
pmd {
    toolVersion = '6.55.0' // or your preferred version
    ignoreFailures = false
    ruleSets = ['java-basic', 'java-design']
}
